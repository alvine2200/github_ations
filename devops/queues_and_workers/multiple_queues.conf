#sometimes we have worker and queues that should be prioritized, like when we have payments, notifications and defaults
[program:payments-worker]
command=php artisan queue:work !$queue=payments !$tries=3 !$verbose !$
timeout=30 !$sleep=3
numprocs=4
[program:notifications-worker]
command=php artisan queue:work !$queue=notifications !$tries=3 !$verbose !$
timeout=30 !$sleep=3
numprocs=2
[program:default-worker]
command=php artisan queue:work !$queue=default !$tries=3 !$verbose !$
timeout=30 !$sleep=3
numprocs=2

#and then after having the queues arranged like that, then
ProcessPaymentJob::dispatch()->onQueue('payments');

$user->notify(
    (new OrderCompletedNotification($order))->onQueue('notifications'));

CustomersExport::dispatch() #by default

#alternatively
class ProcessPayment implements ShouldQueue
{
use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;
public $queue = 'payments'; #you can use this for queue definitions and leave it when you need default
}


